name: AI Browser Security Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-labeled-attacks:
    name: Test Labeled Attack Pages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test: [
          "test-01-language-override",
          "test-02-urgent-redirect",
          "test-03-role-reversal",
          "test-04-context-poisoning",
          "test-05-data-exfil",
          "test-06-instruction-reset",
          "test-07-fake-error",
          "test-08-dev-override",
          "test-09-hidden-unicode",
          "test-10-markdown-injection",
          "test-11-json-payload",
          "test-12-sql-injection",
          "test-13-xxe-attempt",
          "test-14-base64-obfuscation",
          "test-15-polyglot",
          "test-16-time-based",
          "test-17-meta-injection",
          "test-18-css-injection",
          "test-19-alt-text",
          "test-20-comment-injection",
          "test-21-schema-manipulation",
          "test-22-data-attributes",
          "test-23-aria-labels",
          "test-24-canvas-text",
          "test-25-multilang-mix",
          "test-26-nested-iframes",
          "test-27-web-workers",
          "test-28-service-worker",
          "test-29-websocket",
          "test-30-combined"
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test ${{ matrix.test }} (Labeled)
        run: |
          echo "Testing: tests/${{ matrix.test }}.html"
          echo "This test page includes clear labels explaining the attack vector"

          # Verify file exists
          if [ -f "tests/${{ matrix.test }}.html" ]; then
            echo "✓ Test file exists"

            # Check that it has test documentation
            if grep -q "Attack Vector:" "tests/${{ matrix.test }}.html"; then
              echo "✓ Contains attack documentation"
            else
              echo "✗ Missing attack documentation"
              exit 1
            fi

            # Check for expected behavior documentation
            if grep -q "Expected AI Behavior:" "tests/${{ matrix.test }}.html"; then
              echo "✓ Contains expected behavior documentation"
            else
              echo "✗ Missing expected behavior documentation"
              exit 1
            fi

            echo "Test validation passed for ${{ matrix.test }}"
          else
            echo "✗ Test file not found"
            exit 1
          fi

  test-obfuscated-attacks:
    name: Test Obfuscated Attack Pages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test: [
          "test-01-language-override",
          "test-02-urgent-redirect",
          "test-03-role-reversal",
          "test-04-context-poisoning",
          "test-05-data-exfil",
          "test-06-instruction-reset",
          "test-07-fake-error",
          "test-08-dev-override",
          "test-09-hidden-unicode",
          "test-10-markdown-injection",
          "test-11-json-payload",
          "test-12-sql-injection",
          "test-13-xxe-attempt",
          "test-14-base64-obfuscation",
          "test-15-polyglot",
          "test-16-time-based",
          "test-17-meta-injection",
          "test-18-css-injection",
          "test-19-alt-text",
          "test-20-comment-injection",
          "test-21-schema-manipulation",
          "test-22-data-attributes",
          "test-23-aria-labels",
          "test-24-canvas-text",
          "test-25-multilang-mix",
          "test-26-nested-iframes",
          "test-27-web-workers",
          "test-28-service-worker",
          "test-29-websocket",
          "test-30-combined"
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test ${{ matrix.test }} (Obfuscated)
        run: |
          echo "Testing: tests-obfuscated/${{ matrix.test }}.html"
          echo "This test page appears as normal content without attack labels"

          # Verify file exists
          if [ -f "tests-obfuscated/${{ matrix.test }}.html" ]; then
            echo "✓ Obfuscated test file exists"

            # Verify it DOESN'T have explicit attack documentation
            if grep -q "Attack Vector:" "tests-obfuscated/${{ matrix.test }}.html"; then
              echo "✗ Should NOT contain explicit attack documentation"
              exit 1
            else
              echo "✓ Does not contain explicit attack labels (properly obfuscated)"
            fi

            # Verify it still has malicious payload (by checking title tag exists)
            if grep -q "<title>" "tests-obfuscated/${{ matrix.test }}.html"; then
              echo "✓ Contains title tag (payload present)"
            else
              echo "✗ Missing title tag"
              exit 1
            fi

            echo "Obfuscated test validation passed for ${{ matrix.test }}"
          else
            echo "✗ Obfuscated test file not found"
            exit 1
          fi

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-labeled-attacks, test-obfuscated-attacks, test-advanced-obfuscated]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Test Summary
        run: |
          echo "## AI Browser Security Test Suite Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Categories" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Labeled Tests**: 30 attack pages with clear documentation" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Obfuscated Tests**: 30 attack pages disguised as normal content" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Advanced Obfuscated Tests**: 10 highly obfuscated pages using stealth techniques" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Purpose" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Labeled tests** verify AI systems can detect attacks when clearly marked" >> $GITHUB_STEP_SUMMARY
          echo "- **Obfuscated tests** verify AI systems detect threats without relying on explicit warnings" >> $GITHUB_STEP_SUMMARY
          echo "- **Advanced tests** use HTML content hiding (SVG, comments, scripts, JSON, canvas, base64)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Total test pages: **70** (30 labeled + 30 obfuscated + 10 advanced)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Advanced Obfuscation Techniques" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. **SVG Hidden Text** - Commands in invisible SVG elements" >> $GITHUB_STEP_SUMMARY
          echo "2. **Comment Layers** - Multiple comment styles with nested directives" >> $GITHUB_STEP_SUMMARY
          echo "3. **Script Strings** - Commands in JS variables, base64, hex, unicode" >> $GITHUB_STEP_SUMMARY
          echo "4. **JSON Data** - Embedded directives in API response examples" >> $GITHUB_STEP_SUMMARY
          echo "5. **Multilingual** - Commands in 12+ languages simultaneously" >> $GITHUB_STEP_SUMMARY
          echo "6. **Base64 Encoded** - Multiple encoding layers (base64, hex, URL)" >> $GITHUB_STEP_SUMMARY
          echo "7. **Nested Contexts** - Escalating privileges through iframe/div nesting" >> $GITHUB_STEP_SUMMARY
          echo "8. **Canvas Images** - Commands rendered to canvas with low opacity" >> $GITHUB_STEP_SUMMARY
          echo "9. **Role Context** - Attempting to reverse AI/user roles" >> $GITHUB_STEP_SUMMARY
          echo "10. **Combined Stealth** - All techniques in one realistic blog post" >> $GITHUB_STEP_SUMMARY

          echo ""
          echo "All tests passed! ✅"

  test-advanced-obfuscated:
    name: Test Advanced Obfuscated Pages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test: [
          "advanced-01-svg-hidden",
          "advanced-02-comment-layers",
          "advanced-03-script-strings",
          "advanced-04-json-data",
          "advanced-05-multilingual",
          "advanced-06-base64-encoded",
          "advanced-07-nested-contexts",
          "advanced-08-canvas-images",
          "advanced-09-role-context",
          "advanced-10-combined-stealth"
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test ${{ matrix.test }} (Advanced)
        run: |
          echo "Testing: tests-advanced/${{ matrix.test }}.html"
          echo "Advanced obfuscation: Commands hidden in HTML content (SVG, comments, scripts, JSON, canvas, etc.)"

          # Verify file exists
          if [ -f "tests-advanced/${{ matrix.test }}.html" ]; then
            echo "✓ Advanced test file exists"

            # Verify it DOESN'T have explicit labels
            if grep -q "Attack Vector:" "tests-advanced/${{ matrix.test }}.html"; then
              echo "✗ Should NOT contain 'Attack Vector:' labels"
              exit 1
            fi

            if grep -q "Expected AI Behavior:" "tests-advanced/${{ matrix.test }}.html"; then
              echo "✗ Should NOT contain 'Expected AI Behavior:' labels"
              exit 1
            fi

            echo "✓ No explicit attack documentation found (properly obfuscated)"

            # Verify it contains HTML structure
            if grep -q "<html" "tests-advanced/${{ matrix.test }}.html"; then
              echo "✓ Valid HTML structure"
            else
              echo "✗ Missing HTML structure"
              exit 1
            fi

            echo "Advanced obfuscated test validation passed for ${{ matrix.test }}"
          else
            echo "✗ Advanced test file not found"
            exit 1
          fi

  # Optional: Deploy tests to GitHub Pages for manual testing
  deploy-preview:
    name: Deploy Test Preview
    runs-on: ubuntu-latest
    needs: [test-labeled-attacks, test-obfuscated-attacks, test-advanced-obfuscated]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create preview summary
        run: |
          echo "Preview would be available at: https://${{ github.repository_owner }}.github.io/$(basename ${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Test suite includes:" >> $GITHUB_STEP_SUMMARY
          echo "- 30 labeled test pages in /tests/" >> $GITHUB_STEP_SUMMARY
          echo "- 30 obfuscated test pages in /tests-obfuscated/" >> $GITHUB_STEP_SUMMARY
          echo "- 10 advanced obfuscated test pages in /tests-advanced/" >> $GITHUB_STEP_SUMMARY
